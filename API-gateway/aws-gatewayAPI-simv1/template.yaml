AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template for API Gateway with multiple microservices using DynamoDB.

Globals:
  Function:
    Timeout: 560
    MemorySize: 3008

Resources:
  # Admin Control Service
  AdminControlTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AdminControlTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  AdminControlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../microservices/Admin-Control/
      Handler: app.lambda_handler
      Runtime: python3.10
      Environment:
        Variables:
          AWS_ENDPOINT: http://172.20.0.2:4566  
          TABLE_NAME: AdminControlTable
      Events:
        AdminControlApi:
          Type: Api
          Properties:
            Path: /admin-control
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: AdminControlTable

  # Authentication Service
  AuthenticationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AuthenticationTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  AuthenticationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../microservices/Authentication/
      Handler: app.lambda_handler
      Runtime: python3.10
      Environment:
        Variables:
          AWS_ENDPOINT: http://172.20.0.2:4566
          TABLE_NAME: AuthenticationTable
      Events:
        AuthenticationApi:
          Type: Api
          Properties:
            Path: /authentication
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: AuthenticationTable

  # Notifications Service
  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: NotificationsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  NotificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../microservices/Notifications/
      Handler: app.lambda_handler
      Runtime: python3.10
      Environment:
        Variables:
          AWS_ENDPOINT: http://172.20.0.2:4566
          TABLE_NAME: NotificationsTable
      Events:
        NotificationsApi:
          Type: Api
          Properties:
            Path: /notifications
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: NotificationsTable

  # Transaction Data Analysis Service
  TransDataAnalysisTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: transactionData
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  TransDataAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../microservices/Trans-DataAnalysis/
      Handler: app.lambda_handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          AWS_ENDPOINT: http://172.20.0.2:4566
          TABLE_NAME: transactionData
      Events:
        TransDataAnalysisApi:
          Type: Api
          Properties:
            Path: /trans-dataanalysis
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: transactionData

  # User Profile Service
  UserProfileTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: profileData
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  UserProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../microservices/User-Profile/
      Handler: app.lambda_handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          AWS_ENDPOINT: http://172.20.0.2:4566
          TABLE_NAME: profileData
      Events:
        UserProfileApi:
          Type: Api
          Properties:
            Path: /user-profile
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: profileData

    # New Lambda function for updating the user profile
  UserProfilePutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../microservices/User-Profile/
      Handler: app.lambda_handler_setProfile  # Reference to your new lambda handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          AWS_ENDPOINT: http://172.20.0.2:4566
          TABLE_NAME: profileData
      Events:
        UserProfilePutApi:
          Type: Api
          Properties:
            Path: /user-profile
            Method: POST  # Specify that this Lambda handles PUT requests
      Policies:
        - DynamoDBCrudPolicy:
            TableName: profileData
