service: serverless-example
disabledDeprecations:
    - '*'
configValidationMode: off
frameworkVersion: ^3.22.0

provider:
    name: aws
    region: us-east-2
    stage: local
    runtime: nodejs18.x
    versionFunctions: false

plugins:
    - serverless-esbuild
    - serverless-dynamodb-local
    - serverless-offline

package:
    individually: true

custom:
    esbuild:
        config: ./esbuild.config.js

    serverless-offline:
        httpPort: 4000
        lambdaPort: 4001
        allowCache: true
        noPrependStageInUrl: true

    dynamodb:
        stages:
            - local
        start:
            port: 8000
            inMemory: true
            migrate: true
            seed: true
            convertEmptyValues: true
        seed:
            local:
                sources:
                    - table: usersTable
                      sources: [dbSeed/fake-users.json]

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    transactionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: transactionsTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
    user-create:
        name: 'user-create'
        handler: dist/functions/user/create.handler
        description: create a user.
        reservedConcurrency: 1
        memorySize: 256
        timeout: 10
        events:
            - http:
                  path: user
                  method: post

    user-get:
        name: 'user-get'
        handler: dist/functions/user/get.handler
        description: get a user.
        reservedConcurrency: 1
        memorySize: 256
        timeout: 10
        events:
            - http:
                  path: user/{id}
                  method: get

    transaction-create:
        name: 'transaction-create'
        handler: dist/functions/transactions/create.handler
        description: create a transaction.
        reservedConcurrency: 1
        memorySize: 256
        timeout: 10
        events:
            - http:
                  path: transaction
                  method: post

    transaction-get:
        name: 'transaction-get'
        handler: dist/functions/transactions/get.handler
        description: get a transaction.
        reservedConcurrency: 1
        memorySize: 256
        timeout: 10
        events:
            - http:
                  path: transaction/{id}
                  method: get
