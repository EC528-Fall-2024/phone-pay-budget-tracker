import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { DynamoDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../DynamoDBClient";
import { UpdateItemInput, UpdateItemOutput } from "../models/models_0";
/**
 * The input for {@link UpdateItemCommand}.
 */
export interface UpdateItemCommandInput extends UpdateItemInput {
}
/**
 * The output of {@link UpdateItemCommand}.
 */
export interface UpdateItemCommandOutput extends UpdateItemOutput, __MetadataBearer {
}
/**
 * <p>Edits an existing item's attributes, or adds a new item to the table if it does not
 *             already exist. You can put, delete, or add attribute values. You can also perform a
 *             conditional update on an existing item (insert a new attribute name-value pair if it
 *             doesn't exist, or replace an existing name-value pair if it has certain expected
 *             attribute values).</p>
 *          <p>You can also return the item's attribute values in the same <code>UpdateItem</code>
 *             operation using the <code>ReturnValues</code> parameter.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { DynamoDBClient, UpdateItemCommand } from "@aws-sdk/client-dynamodb"; // ES Modules import
 * // const { DynamoDBClient, UpdateItemCommand } = require("@aws-sdk/client-dynamodb"); // CommonJS import
 * const client = new DynamoDBClient(config);
 * const command = new UpdateItemCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link UpdateItemCommandInput} for command's `input` shape.
 * @see {@link UpdateItemCommandOutput} for command's `response` shape.
 * @see {@link DynamoDBClientResolvedConfig | config} for DynamoDBClient's `config` shape.
 *
 * @throws {@link ConditionalCheckFailedException} (client fault)
 *  <p>A condition specified in the operation could not be evaluated.</p>
 *
 * @throws {@link InternalServerError} (server fault)
 *  <p>An error occurred on the server side.</p>
 *
 * @throws {@link InvalidEndpointException} (client fault)
 *
 * @throws {@link ItemCollectionSizeLimitExceededException} (client fault)
 *  <p>An item collection is too large. This exception is only returned for tables that
 *             have one or more local secondary indexes.</p>
 *
 * @throws {@link ProvisionedThroughputExceededException} (client fault)
 *  <p>Your request rate is too high. The Amazon Web Services SDKs for DynamoDB
 *             automatically retry requests that receive this exception. Your request is eventually
 *             successful, unless your retry queue is too large to finish. Reduce the frequency of
 *             requests and use exponential backoff. For more information, go to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
 *
 * @throws {@link RequestLimitExceeded} (client fault)
 *  <p>Throughput exceeds the current throughput quota for your account. Please contact
 *                 <a href="https://aws.amazon.com/support">Amazon Web Services Support</a> to request a
 *             quota increase.</p>
 *
 * @throws {@link ResourceNotFoundException} (client fault)
 *  <p>The operation tried to access a nonexistent table or index. The resource might not
 *             be specified correctly, or its status might not be <code>ACTIVE</code>.</p>
 *
 * @throws {@link TransactionConflictException} (client fault)
 *  <p>Operation was rejected because there is an ongoing transaction for the
 *             item.</p>
 *
 *
 * @example To update an item in a table
 * ```javascript
 * // This example updates an item in the Music table. It adds a new attribute (Year) and modifies the AlbumTitle attribute.  All of the attributes in the item, as they appear after the update, are returned in the response.
 * const input = {
 *   "ExpressionAttributeNames": {
 *     "#AT": "AlbumTitle",
 *     "#Y": "Year"
 *   },
 *   "ExpressionAttributeValues": {
 *     ":t": {
 *       "S": "Louder Than Ever"
 *     },
 *     ":y": {
 *       "N": "2015"
 *     }
 *   },
 *   "Key": {
 *     "Artist": {
 *       "S": "Acme Band"
 *     },
 *     "SongTitle": {
 *       "S": "Happy Day"
 *     }
 *   },
 *   "ReturnValues": "ALL_NEW",
 *   "TableName": "Music",
 *   "UpdateExpression": "SET #Y = :y, #AT = :t"
 * };
 * const command = new UpdateItemCommand(input);
 * const response = await client.send(command);
 * /* response ==
 * {
 *   "Attributes": {
 *     "AlbumTitle": {
 *       "S": "Louder Than Ever"
 *     },
 *     "Artist": {
 *       "S": "Acme Band"
 *     },
 *     "SongTitle": {
 *       "S": "Happy Day"
 *     },
 *     "Year": {
 *       "N": "2015"
 *     }
 *   }
 * }
 * *\/
 * // example id: to-update-an-item-in-a-table-1476118250055
 * ```
 *
 */
export declare class UpdateItemCommand extends $Command<UpdateItemCommandInput, UpdateItemCommandOutput, DynamoDBClientResolvedConfig> {
    readonly input: UpdateItemCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    constructor(input: UpdateItemCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DynamoDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateItemCommandInput, UpdateItemCommandOutput>;
    private serialize;
    private deserialize;
}
