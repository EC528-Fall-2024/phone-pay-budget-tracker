AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Transaction Analysis Microservice

Parameters:
  TransactionDataTableName:
    Type: String
    Description: Name of the transactionData DynamoDB table

  ProfileDataTableName:
    Type: String
    Description: Name of the profileData DynamoDB table

  PlaidClientId:
    Type: String
    Description: PLAID_CLIENT_ID for Plaid API

  PlaidSecret:
    Type: String
    Description: PLAID_SECRET for Plaid API

  CognitoUserPoolId:
    Type: String
    Description: User Pool ID for Cognito authentication

  CognitoRegion:
    Type: String
    Description: Region of the Cognito User Pool

Resources:
  # Create Link Token Function
  CreateLinkTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/plaid/create_link_token/
      Handler: app.lambda_handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          PLAID_CLIENT_ID: !Ref PlaidClientId
          PLAID_SECRET: !Ref PlaidSecret
          USER_POOL_ID: !Ref CognitoUserPoolId
      Events:
        CreateLinkTokenApi:
          Type: Api
          Properties:
            Path: /plaid/create-link-token
            Method: POST
            # Cors:
            #   AllowOrigins: "'*'"  
            #   AllowMethods: "'POST,OPTIONS'"
            #   AllowHeaders: "'Content-Type,Authorization'"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TransactionDataTableName}"

  # Get Access Token Function
  GetAccessTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/plaid/get_access_token/
      Handler: app.getAccessTokenHandler
      Runtime: nodejs20.x
      Environment:
        Variables:
          PLAID_CLIENT_ID: !Ref PlaidClientId
          PLAID_SECRET: !Ref PlaidSecret
          TABLE_NAME: !Ref ProfileDataTableName
          USER_POOL_ID: !Ref CognitoUserPoolId
      Events:
        GetAccessTokenApi:
          Type: Api
          Properties:
            Path: /plaid/get-access-token
            Method: POST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProfileDataTableName}"

  # Get Transactions Function
  GetTransactionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/plaid/get_transactions/
      Handler: app.getTransactionsHandler
      Runtime: nodejs20.x
      Environment:
        Variables:
          PLAID_CLIENT_ID: !Ref PlaidClientId
          PLAID_SECRET: !Ref PlaidSecret
          TABLE_NAME: !Ref TransactionDataTableName
      Events:
        GetTransactionsApi:
          Type: Api
          Properties:
            Path: /plaid/get-transactions
            Method: POST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:BatchWriteItem
                - dynamodb:Query
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TransactionDataTableName}"

  # **New: Get All Transactions Function**
  GetAllTransactionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/
      Handler: app.lambda_handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TransactionDataTableName
      Events:
        GetAllTransactionsApi:
          Type: Api
          Properties:
            Path: /transactions/get-all
            Method: GET
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:GetItem
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TransactionDataTableName}"

  # **New: Store Transactions Function**
  StoreTransactionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/
      Handler: app.store_transactions_handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TransactionDataTableName
      Events:
        StoreTransactionsApi:
          Type: Api
          Properties:
            Path: /transactions/store
            Method: POST
            # Cors:
            #   AllowOrigins: "'*'"  # Adjust as needed for security
            #   AllowMethods: "'POST,OPTIONS'"
            #   AllowHeaders: "'Content-Type,Authorization'"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TransactionDataTableName}"

Outputs:
  CreateLinkTokenApiUrl:
    Description: "API Gateway endpoint URL for Create Link Token Service"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/plaid/create-link-token"

  GetAccessTokenApiUrl:
    Description: "API Gateway endpoint URL for Get Access Token Service"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/plaid/get-access-token"

  GetTransactionsApiUrl:
    Description: "API Gateway endpoint URL for Get Transactions Service"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/plaid/get-transactions"

  GetAllTransactionsApiUrl:
    Description: "API Gateway endpoint URL for Get All Transactions Service"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/transactions/get-all"

  StoreTransactionsApiUrl:
    Description: "API Gateway endpoint URL for Store Transactions Service"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/transactions/store"

