require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'

# Load Podfile properties if available
podfile_properties = {}
podfile_properties_path = File.join(__dir__, 'Podfile.properties.json')
if File.exist?(podfile_properties_path)
  podfile_properties = JSON.parse(File.read(podfile_properties_path))
end

# Set environment variables based on Podfile properties
ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, '13.4'

install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'PhonePayBudgetTracker' do
  use_expo_modules!
  config = use_native_modules!

  # Consolidate use_frameworks! calls
  if podfile_properties['ios.useFrameworks'] || ENV['USE_FRAMEWORKS']
    linkage = podfile_properties['ios.useFrameworks'] ? podfile_properties['ios.useFrameworks'].to_sym : ENV['USE_FRAMEWORKS'].to_sym
    use_frameworks! :linkage => linkage
  end

  # React Native setup
  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  # Add additional pods here
  pod 'Plaid', '~> 5.6.1'

  # Post-install hooks
  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # Necessary for Xcode 14 to prevent resource bundle signing issues
    installer.target_installation_results.pod_target_installation_results.each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end

    # Override DEFINES_MODULE for conflicting pod targets
    conflicting_pods = ["expo-dev-menu", "Main", "ReactNativeCompatibles", "SafeAreaView", "Vendored"]
    conflicting_pods.each do |pod_name|
      target = installer.pods_project.targets.find { |t| t.name == pod_name }
      if target
        target.build_configurations.each do |config|
          # Set DEFINES_MODULE to 'YES' or 'NO' based on your project requirements
          config.build_settings['DEFINES_MODULE'] = 'YES'
        end
      end
    end
  end

  # Post-integrate hooks
  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end
end
